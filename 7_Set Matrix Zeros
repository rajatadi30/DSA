This method is a space optimized version of above method 1. This method uses the first row and first column of the input matrix in place of the auxiliary
arrays row[] and col[] of method 1. So what we do is: first take care of first row and column and store the info about these two in two flag variables 
rowFlag and colFlag. Once we have this info, we can use first row and first column as auxiliary arrays and apply method 1 for submatrix 
(matrix excluding first row and first column) of size (M-1)*(N-1).

//Set Matrix 1's solution below:

void modifyMatrix(int mat[R][C]) 
{ 
// variables to check if there are any 1 in first row and column 
    bool row_flag = false; 
    bool col_flag = false; 
// updating the first row and col if 1 is encountered 
    for (int i = 0; i < R; i++) 
    { 
        for (int j = 0; j < C; j++) 
	{ 
            if (i == 0 && mat[i][j] == 1) 
                row_flag = true; 
            if (j == 0 && mat[i][j] == 1) 
                col_flag = true; 
            if (mat[i][j] == 1) 
            { 
                mat[0][j] = 1; 
                mat[i][0] = 1; 
            } 
        } 
    } 
  
// Modify the input matrix mat[] using the first row and first column of Matrix mat 
    for (int i = 1; i < R; i++) 
    { 
        for (int j = 1; j < C; j++) 
        { 
            if (mat[0][j] == 1 || mat[i][0] == 1) 
                mat[i][j] = 1;  
        } 
    } 
    // modify first row if there was any 1 
    if (row_flag == true) 
    { 
        for (int i = 0; i < C; i++)  
            mat[0][i] = 1; 
    } 
    // modify first col if there was any 1 
    if (col_flag == true) 
    { 
        for (int i = 0; i < R; i++)  
            mat[i][0] = 1; 
    } 
} 
Time Complexity: O(M*N)
Auxiliary Space: O(1)

//Set Matrix 0's solution below:
#include<iostream>
using namespace std;
int main()
 {
	int t;
	cin>>t;
	while(t--)
	{
	    int i,j,R,C;
	    cin>>R>>C;
	    int mat[R][C];
	    for(i=0;i<R;i++)
	    {
	        for(j=0;j<C;j++)
	        {
	            cin>>mat[i][j];   
	        }
	    }
	    bool row_flag = false; 
        bool col_flag = false; 
        for (int i = 0; i < R; i++) 
        { 
            for (int j = 0; j < C; j++) 
            { 
                if (i == 0 && mat[i][j] == 0) 
                    {row_flag = true; }
                if (j == 0 && mat[i][j] == 0) 
                    col_flag = true; 
                if (mat[i][j] == 0) 
                { 
                    mat[0][j] = 0; 
                    mat[i][0] = 0; 
                } 
            } 
        }
        for (int i = 1; i < R; i++) 
        { 
            for (int j = 1; j < C; j++) 
            { 
                if (mat[0][j] == 0 || mat[i][0] == 0) 
                    mat[i][j] = 0; 
            } 
        }
        if (row_flag == true) 
        { 
            for (int i = 0; i < C; i++) 
                mat[0][i] = 0; 
        }
        if (col_flag == true) 
        { 
            for (int i = 0; i < R; i++) 
                mat[i][0] = 0; 
        }
        for (int i = 0; i < R; i++) 
        { 
            for (int j = 0; j < C; j++) 
            {
                cout << mat[i][j]<<" "; 
            }
            cout <<endl; 
        } 
	}
	return 0;
}
