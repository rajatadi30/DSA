// Returns count of possible paths to reach cell at row number m and column number n from the topmost leftmost cell (cell at 1, 1) 
int numberOfPaths(int m, int n) 
{   // Create a 2D table to store results of subproblems 
    int count[m][n]; 
    // Count of paths to reach any cell in first column is 1 
    for (int i = 0; i < m; i++) 
        count[i][0] = 1; 
    // Count of paths to reach any cell in first row is 1 
    for (int j = 0; j < n; j++) 
        count[0][j] = 1; 
    // Calculate count of paths for other cells in bottom-up manner using the recursive solution 
    for (int i = 1; i < m; i++) 
	{ 
        for (int j = 1; j < n; j++) 
            // By uncommenting the last part the code calculates the total possible paths if the diagonal Movements are allowed 
            count[i][j] = count[i - 1][j] + count[i][j - 1]; //+ count[i-1][j-1]; 
    	} 
    return count[m - 1][n - 1]; 
}
int main() 
{ 
    cout << numberOfPaths(3, 3); 
    return 0; 
} 
O/P:6
Time complexity of the above dynamic programming solution is O(mn).
The space complexity of the above solution is O(mn).

Space Optimization of DP solution.
Above solution is more intuitive but we can also reduce the space by O(n); where n is column size.
// Returns count of possible paths to reach cell at row number m and column number n from the topmost leftmost cell (cell at 1, 1) 
int numberOfPaths(int m, int n) 
{   // Create a 1D array to store results of subproblems 
    int dp[n] = { 1 }; 
    dp[0] = 1; 
    for (int i = 0; i < m; i++) 
    { 
        for (int j = 1; j < n; j++) 
	{ 
            dp[j] += dp[j - 1]; 
        } 
    } 
    return dp[n - 1]; 
}  

Note the count can also be calculated using the formula (m-1 + n-1)!/(m-1)!(n-1)!.
Another Approach:(Using combinatorics) In this approach We have to calculate m+n-2 C n-1 here which will be (m+n-2)! / (n-1)! (m-1)!
int numberOfPaths(int m, int n) 
{ 
    // We have to calculate m+n-2 C n-1 here which will be (m+n-2)! / (n-1)! (m-1)! 
    int path = 1; 
    for (int i = n; i < (m + n - 1); i++) 
    { 
        path *= i; 
        path /= (i - n + 1); 
    } 
    return path; 
} 