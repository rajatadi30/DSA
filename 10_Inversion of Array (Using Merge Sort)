// C++ program to Count Inversions in an array using Merge Sort 

#include <bits/stdc++.h> 
using namespace std;   
int _mergeSort(int arr[], int temp[], int left, int right); 
int merge(int arr[], int temp[], int left, int mid, int right); 
  
/* This function sorts the input array and returns the number of inversions in the array */
int mergeSort(int arr[], int array_size) 
{ 
    int temp[array_size]; 
    return _mergeSort(arr, temp, 0, array_size - 1); 
} 
/* An auxiliary recursive function that sorts the input array and returns the number of inversions in the array. */
int _mergeSort(int arr[], int temp[], int left, int right) 
{ 
    int mid, inv_count = 0; 
    if (right > left) 
    {/* Divide the array into two parts and call _mergeSortAndCountInv() for each of the parts */
        mid = (right + left) / 2; 
  
        /* Inversion count will be sum of inversions in left-part, right-part and number of inversions in merging */
        inv_count += _mergeSort(arr, temp, left, mid); 
        inv_count += _mergeSort(arr, temp, mid + 1, right); 
  
        /*Merge the two parts*/
        inv_count += merge(arr, temp, left, mid + 1, right); 
    } 
    return inv_count; 
}

/* This function merges two sorted arrays and returns inversion count in the arrays.*/
int merge(int arr[], int temp[], int left, int mid, int right) 
{ 
    int i, j, k; 
    int inv_count = 0; 
  
    i = left; /* i is index for left subarray*/
    j = mid; /* j is index for right subarray*/
    k = left; /* k is index for resultant merged subarray*/
    while ((i <= mid - 1) && (j <= right)) 
    { 
        if (arr[i] <= arr[j]) 
	{ 
            temp[k++] = arr[i++]; 
        } 
        else 
	{ 
            temp[k++] = arr[j++]; 
            /* this is tricky -- see above explanation/diagram for merge()*/
            inv_count = inv_count + (mid - i); 
// if a[i] is greater than a[j], then there are (mid – i) inversions. because left and right subarrays are sorted, 
// so all the remaining elements in left-subarray (a[i+1], a[i+2] … a[mid]) will be greater than a[j].
        } 
    } 
    /* Copy the remaining elements of left subarray (if there are any) to temp*/
    while (i <= mid - 1) 
        temp[k++] = arr[i++]; 
  
    /* Copy the remaining elements of right subarray (if there are any) to temp*/
    while (j <= right) 
        temp[k++] = arr[j++]; 
  
    /*Copy back the merged elements to original array*/
    for (i = left; i <= right; i++) 
        arr[i] = temp[i]; 
  
    return inv_count; 
}
// Driver code 
int main() 
{ 
    int arr[] = { 1, 20, 6, 4, 5 }; 
    int n = sizeof(arr) / sizeof(arr[0]); 
    int ans = mergeSort(arr, n); 
    cout << " Number of inversions are " << ans; 
    return 0; 
}
O/P:Number of inversions are 5
Time Complexity: O(n log n) The algorithm used is divide and conquer, So in each level one full array traversal is needed and there are log n levels 
so the time complexity is O(n log n).   
Space Compelxity:O(1), No extra space is required.

Working Code:
#include<bits/stdc++.h>
using namespace std;
long long int _mergeSort(long long int arr[], long long int temp[],long long int left,long long int right); 
long long int merge(long long int arr[], long long int temp[],long long int left,long long int mid,long long int right);

long long int mergeSort(long long int arr[],long long int array_size) 
{ 
    long long int temp[array_size]; 
    return _mergeSort(arr, temp, 0, array_size - 1); 
} 
long long int _mergeSort(long long int arr[], long long int temp[], long long int left,long long int right) 
{ 
    long long int mid, inv_count = 0; 
    if (right > left) 
    { 
        mid = (right + left) / 2; 
        inv_count += _mergeSort(arr, temp, left, mid); 
        inv_count += _mergeSort(arr, temp, mid + 1, right); 
        inv_count += merge(arr, temp, left, mid + 1, right); 
    } 
    return inv_count; 
} 
long long int merge(long long int arr[], long long temp[], long long int left,long long int mid,long long int right) 
{ 
    long long int i, j, k; 
    long long int inv_count = 0; 
    i = left; 
    j = mid; 
    k = left; 
    while ((i <= mid - 1) && (j <= right)) 
    { 
        if (arr[i] <= arr[j]) 
        { 
            temp[k++] = arr[i++]; 
        } 
        else 
        { 
            temp[k++] = arr[j++]; 
            inv_count = inv_count + (mid - i); 
        } 
    } 
    while (i <= mid - 1) 
        temp[k++] = arr[i++]; 
    while (j <= right) 
        temp[k++] = arr[j++]; 
    /*Copy back the merged elements to original array*/
    for (i = left; i <= right; i++) 
        arr[i] = temp[i]; 
  
    return inv_count; 
} 
int main()
{   
    long long int t;
    cin>>t;
    while(t--)
    {   long long int n,i;
        cin>>n;
        long long int arr[n];
        for(i=0;i<n;i++)
            cin>>arr[i];
	    long long int ans = mergeSort(arr, n); 
        cout <<ans <<endl;
    }
	return 0;
}
